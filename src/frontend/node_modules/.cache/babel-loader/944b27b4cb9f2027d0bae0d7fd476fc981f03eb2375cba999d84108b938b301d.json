{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport services from '../../services/services.js';\nexport default {\n  props: {\n    username: {\n      type: String,\n      required: true\n    },\n    book_id: {\n      type: String,\n      required: true\n    },\n    comments: {\n      type: Array,\n      required: true\n    },\n    loading: {\n      type: Boolean,\n      required: true\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const showForm = ref(false);\n    const newCommentDescription = ref('');\n    const localComments = ref([]);\n    const user = computed(() => store.state.user);\n    watch(() => props.comments, newComments => {\n      localComments.value = [...newComments];\n    }, {\n      immediate: true\n    });\n    const toggleCommentForm = () => {\n      showForm.value = !showForm.value;\n      newCommentDescription.value = '';\n    };\n    const formatDate = () => {\n      const now = new Date();\n      const offset = 2;\n      const utcDate = new Date(now.getTime() + offset * 60 * 60 * 1000);\n      const year = utcDate.getFullYear();\n      const month = String(utcDate.getMonth() + 1).padStart(2, '0');\n      const day = String(utcDate.getDate()).padStart(2, '0');\n      const hours = String(utcDate.getHours()).padStart(2, '0');\n      const minutes = String(utcDate.getMinutes()).padStart(2, '0');\n      const seconds = String(utcDate.getSeconds()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    };\n    const submitComment = async () => {\n      if (newCommentDescription.value.trim() === '') {\n        alert('Comment description cannot be empty');\n        return;\n      }\n      const newComment = {\n        book_id: props.book_id,\n        user: props.username,\n        description: newCommentDescription.value,\n        createdAt: formatDate()\n      };\n      try {\n        const response = await services.addComment(newComment);\n        const addedComment = response.data;\n        localComments.value.push(addedComment);\n        toggleCommentForm();\n      } catch (err) {\n        console.log(err.response.data.msg);\n      }\n    };\n    const deleteComment = async commentId => {\n      try {\n        await services.removeComment({\n          book_id: props.book_id,\n          commId: commentId\n        });\n        localComments.value = localComments.value.filter(comment => comment.id !== commentId);\n      } catch (err) {\n        console.log(err.response.data.msg);\n      }\n    };\n    return {\n      showForm,\n      newCommentDescription,\n      localComments,\n      user,\n      toggleCommentForm,\n      submitComment,\n      deleteComment\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","watch","useStore","services","props","username","type","String","required","book_id","comments","Array","loading","Boolean","setup","store","showForm","newCommentDescription","localComments","user","state","newComments","value","immediate","toggleCommentForm","formatDate","now","Date","offset","utcDate","getTime","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","submitComment","trim","alert","newComment","description","createdAt","response","addComment","addedComment","data","push","err","console","log","msg","deleteComment","commentId","removeComment","commId","filter","comment","id"],"sources":["C:\\Users\\mynig\\VScodium\\Book-Recommender\\frontend\\src\\components\\ComentsShow.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"loading\" class=\"spinner\">Loading...</div>\r\n    <div v-else class=\"wrap\">\r\n      <div class=\"add-comment\">\r\n        Leave a comment\r\n        <span>\r\n          <button @click=\"toggleCommentForm\" class=\"comm-btn\">{{ showForm ? '-' : '+' }}</button>\r\n        </span>\r\n      </div>\r\n  \r\n      <div v-if=\"showForm\" class=\"comment-form\">\r\n        <textarea v-model=\"newCommentDescription\" placeholder=\"Enter your comment here...\"></textarea>\r\n        <button @click=\"submitComment\" style=\"margin-right: 10px;\">Send</button>\r\n      </div>\r\n  \r\n      <div v-if=\"localComments.length === 0\">No Comments</div>\r\n      <div v-else v-for=\"comment in localComments\" :key=\"comment.createdAt\" class=\"comm-detail\">\r\n        <h6>{{ comment.id }}</h6>\r\n        <h6>By {{ comment.user }}</h6>\r\n        <p>{{ comment.description }}</p>\r\n        <p>{{ comment.createdAt }}</p>\r\n        <span>\r\n          <button v-if=\"comment.user === username || user.username === 'adminDarko'\" @click=\"deleteComment(comment.id)\">Delete Comment</button>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, computed, watch } from 'vue';\r\n  import { useStore } from 'vuex';\r\n  import services from '../../services/services.js';\r\n  \r\n  export default {\r\n    props: {\r\n      username: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      book_id: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      comments: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      loading: {\r\n        type: Boolean,\r\n        required: true\r\n      }\r\n    },\r\n    setup(props) {\r\n      const store = useStore();\r\n      const showForm = ref(false);\r\n      const newCommentDescription = ref('');\r\n      const localComments = ref([]);\r\n      const user = computed(() => store.state.user);\r\n  \r\n      watch(() => props.comments, (newComments) => {\r\n        localComments.value = [...newComments];\r\n      }, { immediate: true });\r\n  \r\n      const toggleCommentForm = () => {\r\n        showForm.value = !showForm.value;\r\n        newCommentDescription.value = '';\r\n      };\r\n  \r\n      const formatDate = () => {\r\n        const now = new Date();\r\n        const offset = 2;\r\n        const utcDate = new Date(now.getTime() + (offset * 60 * 60 * 1000));\r\n  \r\n        const year = utcDate.getFullYear();\r\n        const month = String(utcDate.getMonth() + 1).padStart(2, '0');\r\n        const day = String(utcDate.getDate()).padStart(2, '0');\r\n        const hours = String(utcDate.getHours()).padStart(2, '0');\r\n        const minutes = String(utcDate.getMinutes()).padStart(2, '0');\r\n        const seconds = String(utcDate.getSeconds()).padStart(2, '0');\r\n  \r\n        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n      };\r\n  \r\n      const submitComment = async () => {\r\n        if (newCommentDescription.value.trim() === '') {\r\n          alert('Comment description cannot be empty');\r\n          return;\r\n        }\r\n  \r\n        const newComment = {\r\n          book_id: props.book_id,\r\n          user: props.username,\r\n          description: newCommentDescription.value,\r\n          createdAt: formatDate()\r\n        };\r\n        try {\r\n          const response = await services.addComment(newComment);\r\n  \r\n          const addedComment = response.data;\r\n          localComments.value.push(addedComment);\r\n  \r\n          toggleCommentForm();\r\n        } catch (err) {\r\n          console.log(err.response.data.msg);\r\n        }\r\n      };\r\n  \r\n      const deleteComment = async (commentId) => {\r\n        try {\r\n          await services.removeComment({\r\n            book_id: props.book_id,\r\n            commId: commentId\r\n          });\r\n          localComments.value = localComments.value.filter(comment => comment.id !== commentId);\r\n        } catch (err) {\r\n          console.log(err.response.data.msg);\r\n        }\r\n      };\r\n  \r\n      return {\r\n        showForm,\r\n        newCommentDescription,\r\n        localComments,\r\n        user,\r\n        toggleCommentForm,\r\n        submitComment,\r\n        deleteComment\r\n      };\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped lang=\"scss\">\r\n\r\n  .spinner {\r\n    flex: 1 1 100%;\r\n    text-align: center;\r\n    font-size: 24px;\r\n    margin: 20px;\r\n  }\r\n\r\n  .wrap {\r\n    background-color: lightblue;\r\n  }\r\n  .add-comment {\r\n    border: solid black 2px;\r\n    border-radius: 5%;\r\n    margin-top: 10px;\r\n    padding: 10px;\r\n  }\r\n  .add-comment span {\r\n    margin-left: 10px;\r\n  }\r\n  .comm-btn {\r\n    border: none;\r\n    background-color: lightcyan;\r\n  }\r\n  .comment-form {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n  \r\n    textarea {\r\n      width: 95%;\r\n      height: 100px;\r\n      padding: 10px;\r\n      margin: 10px;\r\n      align-self: center;\r\n      border-radius: 4px;\r\n      border: 1px solid #ccc;\r\n    }\r\n  \r\n    button {\r\n      align-self: flex-end;\r\n      padding: 10px 20px;\r\n      border: none;\r\n      border-radius: 4px;\r\n      background-color: #007bff;\r\n      color: #fff;\r\n      cursor: pointer;\r\n  \r\n      &:hover {\r\n        background-color: #0056b3;\r\n      }\r\n    }\r\n  }\r\n\r\n  .comm-detail{\r\n    margin-top: 10px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}